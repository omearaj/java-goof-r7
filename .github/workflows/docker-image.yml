# This is a basic workflow to help you get started with Actions
#
name: Build Artifact, Build & Push Image

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # TODO: Change registry URL if not using Docker Hub
  CONTAINER_REGISTRY_URL: https://registry.hub.docker.com
  # TODO: Change Registry USERID to your userid
  REGISTRY_USERID: omearaj
  #TODO: Only change if you already have a spring-petclinic you want to keep. 
  IMAGE_NAME: java-goof-r7
  IMAGE_BP_NAME: java-goof-r7-bp  

jobs:
  snyk_vulnerability_check:
    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Run Snyk test
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}
        with:
          command: test
      
#      - name: Run Snyk monitor
#        uses: snyk/actions/maven@master
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}
#        with:
#          command: monitor
#          args: --severity-threshold=high

  build_mvn_aritfact:

    #needs: snyk_vulnerability_check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
      
    - name: Build with Maven & Snyk
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }} 
      run: mvn install
    
    - uses: actions/upload-artifact@v2
      with:
        name: java-goof-r7
        path: ${{ env.github_workspace }}./todolist-web-struts/target/todolist.war
        if-no-files-found: warn #
        
  # Push image to Container Registry
  build-and-push-Docker-Image:
    # Ensure test job passes before pushing image.
    needs: build_mvn_aritfact

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/download-artifact@v2.0
        with:
         name: java-goof-r7
         #path: /usr
           
      - name: Build and push Docker images
        uses: docker/build-push-action@v1.1.1
        with:
         username: ${{ env.REGISTRY_USERID }}
         password: ${{ secrets.DOCKER_KEY }}
         repository: omearaj/${{ env.IMAGE_NAME }}
         build_args: TCELL_AGENT_APP_ID=${{ secrets.TCELL_AGENT_APP_ID }},TCELL_AGENT_API_KEY=${{ secrets.TCELL_AGENT_API_KEY }},TCELL_API_URL=${{ secrets.TCELL_API_URL}},TCELL_INPUT_URL=${{ secrets.TCELL_INPUT_URL}}
         tag_with_ref: true
         tag_with_sha: true  
         add_git_labels: true  
      
      - name: Run Snyk to check Docker images for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}
        with:
         image: omearaj/${{ env.IMAGE_NAME }}
         command: monitor  

 # Push image to Container Registry
 # build-and-push-Buildpack-Image:
    # Ensure test job passes before pushing image.
 #  needs: build_mvn_aritfact

 #   runs-on: ubuntu-latest
 #   if: github.event_name == 'push'

 #   steps:
 #     - uses: actions/checkout@v2
 #     
 #     - uses: actions/download-artifact@v2
 #       with:
 #        name: spring-petclinic
      
 #     - name: Set env Image Path
 #       run: echo ::set-env name=IMAGE_BP_NAME1::${{ env.REGISTRY_USERID}}/${{ env.IMAGE_BP_NAME}}
           
 #     - name: Build image
 #       uses: mamezou-tech/buildpacks-action@master
 #       with:
 #         image: '${{ env.IMAGE_BP_NAME1 }}'
 #         tag: 'v1.0.0'
 #         path: 'spring-petclinic-2.3.1.BUILD-SNAPSHOT.jar'
 #         builder: 'gcr.io/paketo-buildpacks/builder:base'
 #         env: 'BP_JVM_VERSION=8.*'
    
 #     - name: Set env SCAN_IMAGE
 #       run: echo ::set-env name=SCAN_IMAGE::${{ env.REGISTRY_USERID}}/${{ env.IMAGE_BP_NAME}}:v1.0.0
        
 #     - name: Run Snyk to check Docker images for vulnerabilities
 #       uses: snyk/actions/docker@master
 #       env:
 #         SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}
 #       with:
 #        image: ${{ env.SCAN_IMAGE }}
 #        command: monitor  
  deploy-on-GKE:
    needs: build-and-push-Docker-Image
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: kubectl - Google Cloud GKE cluster.
      uses: ameydev/gke-kubectl-action@master
      env:
        PROJECT_ID: ${{ secrets.PROJECT_ID }}
        APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
        ZONE_NAME: us-central1-c
      with:
        args: apply -f k8s/deployment.yaml
      
